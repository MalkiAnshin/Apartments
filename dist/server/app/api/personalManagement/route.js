"use strict";(()=>{var e={};e.id=246,e.ids=[246],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},35900:e=>{e.exports=require("pg")},54524:(e,r,o)=>{o.r(r),o.d(r,{originalPathname:()=>m,patchFetch:()=>R,requestAsyncStorage:()=>g,routeModule:()=>c,serverHooks:()=>E,staticGenerationAsyncStorage:()=>y});var t={};o.r(t),o.d(t,{DELETE:()=>u,GET:()=>d,POST:()=>l});var s=o(49303),n=o(88716),p=o(60670),a=o(87070),i=o(68735);async function l(e){let{propertyId:r,soldTo:o,soldDate:t,soldPrice:s,sellerId:n,property_type:p,contact_seller:l}=await e.json();if(console.log("Received POST request with data:",{propertyId:r,soldTo:o,soldDate:t,soldPrice:s,sellerId:n,property_type:p,contact_seller:l}),!r||!o||!t||!s||!n||!p||!l)return console.log("Error: Missing required fields"),a.NextResponse.json({error:"All fields are required"},{status:400});try{return console.log(`Inserting sold property data for propertyId: ${r}`),await i.Z.query(`INSERT INTO sold_property (property_id, sold_to, sold_date, price, seller_id, property_type, contact_seller)
       VALUES ($1, $2, $3, $4, $5, $6, $7)`,[r,o,t,s,n,p,l]),console.log(`Sold property data inserted for propertyId: ${r}`),console.log(`Deleting property with propertyId: ${r}`),await i.Z.query("DELETE FROM apartments WHERE property_id = $1",[r]),console.log(`Property with propertyId: ${r} deleted from apartments`),a.NextResponse.json({message:"Property sale information saved and property deleted successfully"})}catch(e){return console.error("Error processing POST request:",e),a.NextResponse.json({error:"Error saving property sale information or deleting property"},{status:500})}}async function d(e){let{searchParams:r}=new URL(e.url),o=r.get("userId");if(console.log(`Received GET request for userId: ${o}`),!o)return console.log("Error: userId is missing"),a.NextResponse.json({error:"UserId is required"},{status:400});try{console.log(`Fetching properties for userId: ${o}`);let e=await i.Z.query("SELECT * FROM apartments WHERE user_id = $1",[o]);return console.log(`Found ${e.rows.length} properties for userId: ${o}`),a.NextResponse.json(e.rows)}catch(e){return console.error("Error fetching properties:",e),a.NextResponse.json({error:"Error fetching properties"},{status:500})}}async function u(e){let{searchParams:r}=new URL(e.url),o=r.get("propertyId");if(console.log(`Received DELETE request for propertyId: ${o}`),!o)return console.log("Error: propertyId is missing"),a.NextResponse.json({error:"propertyId is required"},{status:400});try{return console.log(`Deleting property with propertyId: ${o}`),await i.Z.query("DELETE FROM apartments WHERE property_id = $1",[o]),console.log(`Property with propertyId: ${o} deleted`),a.NextResponse.json({message:"Property deleted successfully"})}catch(e){return console.error("Error processing DELETE request:",e),a.NextResponse.json({error:"Error deleting property"},{status:500})}}let c=new s.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/personalManagement/route",pathname:"/api/personalManagement",filename:"route",bundlePath:"app/api/personalManagement/route"},resolvedPagePath:"C:\\Users\\Malki\\OneDrive\\שולחן העבודה\\פרויקט מאגר דירות\\Apartments\\app\\api\\personalManagement\\route.tsx",nextConfigOutput:"",userland:t}),{requestAsyncStorage:g,staticGenerationAsyncStorage:y,serverHooks:E}=c,m="/api/personalManagement/route";function R(){return(0,p.patchFetch)({serverHooks:E,staticGenerationAsyncStorage:y})}},68735:(e,r,o)=>{o.d(r,{Z:()=>s});let{Pool:t}=o(35900),s=new t({user:process.env.DB_USER,host:process.env.DB_HOST,database:process.env.DB_NAME,password:process.env.DB_PASSWORD,port:process.env.DB_PORT,ssl:!1})}};var r=require("../../../webpack-runtime.js");r.C(e);var o=e=>r(r.s=e),t=r.X(0,[276,972],()=>o(54524));module.exports=t})();